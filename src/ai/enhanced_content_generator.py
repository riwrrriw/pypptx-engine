"""
Enhanced Content Generator for AI/RAG system
Uses LLM to generate better content plans and project summaries
"""

import json
import re
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
from ai_foundry import AIFoundryClient
from image_service import ImageService


class EnhancedContentGenerator:
    """Generate enhanced content plans and summaries using LLM"""
    
    def __init__(self):
        self.ai_client = AIFoundryClient()
        self.image_service = ImageService()
    
    def generate_enhanced_content_plan(self, extracted_content: Dict[str, Any], work_name: str) -> str:
        """Generate enhanced content plan using LLM"""
        
        # Prepare context for LLM
        context = self._prepare_content_context(extracted_content)
        
        prompt = f"""
You are a professional presentation designer. Create a comprehensive content plan for a presentation based on the following extracted content.

EXTRACTED CONTENT:
{context}

PROJECT NAME: {work_name}

Create a detailed content plan following this structure:

**Project Name**: [Professional title based on content]
**Presentation Goal**: [Clear, compelling goal statement]
**Target Audience**: [Identify the intended audience]
**Color Scheme**: [Choose: professional, modern, or creative based on content]

## Slide Structure

### Slide 1: Title Slide
**Content Type**: title
**Main Points**:
- [Compelling title]
- [Engaging subtitle]
**Background**: gradient
**Visual Elements**: [Suggest relevant imagery]
**Source**: Title slide

### Slide 2: [Descriptive Title]
**Content Type**: [bullet_list/content/image/comparison]
**Main Points**:
- [Key point 1 - detailed and actionable]
- [Key point 2 - detailed and actionable]
- [Key point 3 - detailed and actionable]
**Background**: [gradient/solid/image]
**Visual Elements**: [Specific image suggestions]
**Source**: [Reference to source material]

[Continue for 4-6 slides total, each with unique, valuable content]

## Design Preferences
- **Typography**: Modern, professional fonts
- **Layout**: Clean, balanced compositions
- **Visual Style**: [Professional/Modern/Creative] with high-quality imagery
- **Color Psychology**: [Explain color choice reasoning]

## Content Strategy
- **Opening Hook**: [How to grab attention]
- **Key Messages**: [3-5 core messages]
- **Call to Action**: [What audience should do next]

IMPORTANT: Make each slide substantive with specific, actionable content. Avoid generic bullet points.
"""

        try:
            response = self.ai_client.enhance_content_plan(
                extracted_content=extracted_content,
                project_context=prompt
            )
            return response.strip()
        except Exception as e:
            print(f"LLM generation error: {e}")
            return self._generate_fallback_content_plan(work_name, extracted_content)
    
    def generate_enhanced_project_summary(self, content_plan_path: Path, json_spec: Dict[str, Any], work_name: str) -> str:
        """Generate enhanced project summary using LLM"""
        
        # Read content plan
        with open(content_plan_path, 'r', encoding='utf-8') as f:
            content_plan = f.read()
        
        # Extract slide information from JSON
        slides_info = self._extract_slides_info(json_spec)
        
        prompt = f"""
Create a comprehensive project summary for this presentation project.

CONTENT PLAN:
{content_plan[:1000]}...

SLIDES GENERATED: {len(slides_info)}

Generate a professional project summary with:

# Project Summary: {work_name}

## Executive Overview
[2-3 sentences describing the presentation's purpose and value]

## Generated Files
- **Content Plan**: content_plan.md
- **JSON Specification**: {work_name}_presentation.json
- **PowerPoint Presentation**: {work_name}.pptx
- **Project Summary**: project_summary.md

## Presentation Analytics
- **Total Slides**: {len(slides_info)}
- **Generated Date**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Estimated Duration**: [Calculate based on slide count]
- **Complexity Level**: [Simple/Moderate/Complex]

## Content Breakdown
[For each slide, provide meaningful description of content and purpose]

## Design Elements
- **Color Scheme**: [Extracted from content plan]
- **Visual Style**: [Professional assessment]
- **Image Strategy**: [How images support content]
- **Typography**: [Font choices and hierarchy]

## Key Strengths
- [Identify 3-4 strong points of the presentation]

## Recommendations for Use
- **Best Contexts**: [When to use this presentation]
- **Audience Fit**: [Who will benefit most]
- **Customization Tips**: [How to adapt for different uses]

## Next Steps
1. Review the generated presentation: `{work_name}.pptx`
2. Customize content for your specific audience
3. Practice delivery with slide transitions
4. Consider adding interactive elements if presenting live

---
*Generated by pypptx-engine AI system with enhanced LLM content generation*
"""

        try:
            response = self.ai_client.generate_content(
                prompt=prompt,
                max_tokens=1500,
                temperature=0.6
            )
            return response.strip()
        except Exception as e:
            print(f"LLM generation error: {e}")
            return self._generate_fallback_summary(work_name, slides_info)
    
    def enhance_slide_content_with_images(self, slide_info: Dict[str, Any]) -> Dict[str, Any]:
        """Enhance slide content with professional images"""
        slide_title = slide_info.get("title", "")
        content_type = slide_info.get("content_type", "content")
        
        # Get image suggestions
        image_queries = self.image_service.get_slide_image_suggestions(slide_title, content_type)
        
        # Find best image
        best_image = None
        for query in image_queries:
            image = self.image_service.find_best_image(query, slide_title)
            if image:
                best_image = image
                break
        
        if best_image:
            slide_info["image_url"] = best_image["url"]
            slide_info["image_description"] = best_image["description"]
            slide_info["image_photographer"] = best_image["photographer"]
        
        return slide_info
    
    def _prepare_content_context(self, extracted_content: Dict[str, Any]) -> str:
        """Prepare extracted content for LLM context"""
        context_parts = []
        
        for file_path, content in extracted_content.items():
            if isinstance(content, dict):
                file_type = content.get("type", "unknown")
                file_content = content.get("content", "")
                context_parts.append(f"FILE: {file_path} (Type: {file_type})\n{file_content[:500]}...\n")
            else:
                context_parts.append(f"FILE: {file_path}\n{str(content)[:500]}...\n")
        
        return "\n".join(context_parts)
    
    def _extract_slides_info(self, json_spec: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract slide information from JSON specification"""
        slides = json_spec.get("presentation", {}).get("slides", [])
        slides_info = []
        
        for i, slide in enumerate(slides, 1):
            slide_info = {
                "number": i,
                "layout": slide.get("layout", 6),
                "shapes_count": len(slide.get("shapes", [])),
                "has_background": "background" in slide,
                "has_transition": "transition" in slide
            }
            slides_info.append(slide_info)
        
        return slides_info
    
    def _generate_fallback_content_plan(self, work_name: str, extracted_content: Dict[str, Any]) -> str:
        """Generate fallback content plan if LLM fails"""
        return f"""**Project Name**: {work_name}
**Presentation Goal**: Professional presentation based on extracted content
**Target Audience**: General business audience
**Color Scheme**: professional

## Slide Structure

### Slide 1: Title Slide
**Content Type**: title
**Main Points**:
- {work_name}
- Professional Presentation
**Background**: gradient
**Visual Elements**: Professional background image
**Source**: Title slide

### Slide 2: Overview
**Content Type**: bullet_list
**Main Points**:
- Key insights from source materials
- Professional analysis and recommendations
- Strategic next steps
**Background**: gradient
**Visual Elements**: Business concept imagery
**Source**: Extracted content

### Slide 3: Key Findings
**Content Type**: content
**Main Points**:
- Important discoveries from analysis
- Data-driven insights
- Supporting evidence
**Background**: solid
**Visual Elements**: Data visualization imagery
**Source**: Content analysis

### Slide 4: Recommendations
**Content Type**: bullet_list
**Main Points**:
- Actionable recommendations
- Implementation strategy
- Success metrics
**Background**: gradient
**Visual Elements**: Strategy and planning imagery
**Source**: Analysis conclusions

## Design Preferences
- **Typography**: Modern, professional fonts
- **Layout**: Clean, balanced compositions
- **Visual Style**: Professional with high-quality imagery
- **Color Psychology**: Blue conveys trust and professionalism
"""
    
    def _generate_fallback_summary(self, work_name: str, slides_info: List[Dict[str, Any]]) -> str:
        """Generate fallback summary if LLM fails"""
        return f"""# Project Summary: {work_name}

## Executive Overview
Professional presentation generated using AI-powered content analysis and design templates.

## Generated Files
- **Content Plan**: content_plan.md
- **JSON Specification**: {work_name}_presentation.json
- **PowerPoint Presentation**: {work_name}.pptx
- **Project Summary**: project_summary.md

## Presentation Analytics
- **Total Slides**: {len(slides_info)}
- **Generated Date**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Estimated Duration**: {len(slides_info) * 2} minutes
- **Complexity Level**: Moderate

## Content Breakdown
{len(slides_info)} slides with professional design templates and enhanced visual elements.

## Design Elements
- **Color Scheme**: Professional blue and white
- **Visual Style**: Modern corporate design
- **Image Strategy**: High-quality stock photography
- **Typography**: Clean, readable fonts

## Next Steps
1. Review the generated presentation: `{work_name}.pptx`
2. Customize content for your specific audience
3. Practice delivery with slide transitions
4. Consider adding interactive elements if presenting live

---
*Generated by pypptx-engine AI system*
"""
